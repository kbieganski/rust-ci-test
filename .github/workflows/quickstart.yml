# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md
#
# While our "example" application has the platform-specific code,
# for simplicity we are compiling and testing everything on the Ubuntu environment only.
# For multi-OS testing see the `cross.yml` workflow.

on: [push, pull_request]

name: Check and test

jobs:
  general:
    name: General checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Update Rust
        run: rustup update

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Install `cargo-audit`, `cargo-deny`
        run: cargo install cargo-audit cargo-deny

      - name: Formatting
        run: cargo fmt --all -- --check

      - name: Audit
        run: cargo audit --color always
        if: ${{ success() || failure() }}

      - name: Deny
        run: cargo deny --color always --all-features
        if: ${{ success() || failure() }}

  matrix:
    name: Generate job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Update Rust
        run: rustup update

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Install `cargo-feature-combinations`
        run: cargo install cargo-feature-combinations

      - name: Generate job matrix
        id: matrix
        run: |
          echo "::set-output name=matrix::{\"include\":$(cargo feature-combinations matrix | jq -c '[.[] + (["ubuntu-latest","macos-latest","windows-latest"][] | [{platform: .}])[]]')}"

  check:
    name: "Check ${{ matrix.name }} | ${{ matrix.platform }} | features: [${{ matrix.features }}]"
    needs: matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Update Rust
        run: rustup update

      - name: Check
        run: cargo check --color always --package ${{ matrix.name }} --features "${{ matrix.features }}"

      - name: Build
        run: cargo build --release
        if: ${{ success() || failure() }}

      - name: Lint
        run: cargo clippy --color always --package ${{ matrix.name }} --no-deps --features "${{ matrix.features }}" -- -D warnings
        if: ${{ success() || failure() }}

  test:
    name: "Test ${{ matrix.name }} | ${{ matrix.platform }} | features: [${{ matrix.features }}]"
    needs: matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Update Rust
        run: rustup update

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Test
        run: cargo test --color always --package ${{ matrix.name }} --features "${{ matrix.features }}"
        if: ${{ success() || failure() }}

      - name: Bench
        run: cargo bench --color always --package ${{ matrix.name }} --features "${{ matrix.features }}"
        if: ${{ success() || failure() }}
