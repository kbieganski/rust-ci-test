name: Build

on:
  push:
    branches: [main]
    tags-ignore: ["[0-9]+.[0-9]+*"]
  workflow_call:

jobs:
  test:
    name: Test
    uses: ./.github/workflows/test.yml

  linux:
    name: Build | Linux | ${{ matrix.target }} | ${{ matrix.profile }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: [dev, release]
        target: [x86_64, aarch64]
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        run: |
          rustup update
          rustup target add ${{ matrix.target }}-unknown-linux-gnu

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Setup linker
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml
        if: ${{ matrix.target == 'aarch64' }}

      - name: Build
        run: |
          cargo build --workspace --lib --bins \
            --profile ${{ matrix.profile }} --target ${{ matrix.target }}-unknown-linux-gnu \
            --color always
          cargo doc --workspace --no-deps --color always

      - name: Prepare
        run: |
          mkdir -p out/lib
          mv $(find target/${{ matrix.target }}-unknown-linux-gnu/* -maxdepth 1 -type f -executable) out
          mv target/${{ matrix.target }}-unknown-linux-gnu/*/*.rlib out/lib
          mv target/doc LICENSE README.md out
          tar cf out.tar out  # preserve permissions

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: out.tar
          name: linux-${{ matrix.target }}

  macos:
    name: Build | macOS | ${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      matrix:
        target: [aarch64, x86_64]
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        run: |
          rustup update
          rustup target add ${{ matrix.target }}-apple-darwin

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) \
            MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version) \
            cargo build --workspace --lib --bins \
              --release --target ${{ matrix.target }}-apple-darwin \
              --color always
          cargo doc --workspace --no-deps --color always

      - name: Prepare
        run: |
          mkdir -p out/lib
          mv $(find target/${{ matrix.target }}-apple-darwin/release -maxdepth 1 -type f -perm +111) out
          mv target/${{ matrix.target }}-apple-darwin/release/*.rlib out/lib
          mv target/doc LICENSE README.md out
          tar cf out.tar out  # preserve permissions

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: out.tar
          name: macos-${{ matrix.target }}

  macos-universal:
    name: Build | macOS | Universal Binary
    runs-on: macos-latest
    needs: macos

    steps:
      - name: Download
        uses: actions/download-artifact@v3
        with:
          path: ./builds

      - name: Unpack
        run: |
          tar xvf builds/macos-aarch64/out.tar --directory builds/macos-aarch64
          tar xvf builds/macos-x86_64/out.tar --directory builds/macos-x86_64

      - name: Combine
        run: |
          for EXECUTABLE in $(find builds/macos-aarch64/out -maxdepth 1 -type f -perm +111); do
            EXECUTABLE=$(basename $EXECUTABLE)
            lipo -create -output $EXECUTABLE \
              builds/macos-aarch64/out/$EXECUTABLE \
              builds/macos-x86_64/out/$EXECUTABLE
          done

      - name: Prepare
        run: |
          mkdir out
          mv $(find . -maxdepth 1 -type f -perm +111) out
          mv builds/macos-aarch64/out/{doc,LICENSE,README.md} out
          tar cf out.tar out  # preserve permissions

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: out.tar
          name: macos-universal

  windows:
    name: Build | Windows | ${{ matrix.target }}
    runs-on: windows-latest
    strategy:
      matrix:
        target: [gnu, msvc]
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        run: |
          rustup update
          rustup target add x86_64-pc-windows-${{ matrix.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: |
          cargo build --workspace --lib --bins `
            --release --target x86_64-pc-windows-${{ matrix.target }} `
            --color always
          cargo doc --workspace --no-deps --color always

      - name: Prepare
        run: |
          mkdir -p out/lib
          mv target/x86_64-pc-windows-${{ matrix.target }}/release/*.exe out
          mv target/x86_64-pc-windows-${{ matrix.target }}/release/*.rlib out/lib
          mv target/doc, LICENSE, README.md out

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: out
          name: win-${{ matrix.target }}
